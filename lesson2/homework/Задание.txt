В данном задании нужно написать приложение, получающее информацию с внешнего API и определенным образом ее сортирующее.
В начале нужно получить список всех монстров D&D 5 редакции:
GET https://www.dnd5eapi.co/api/monsters/
Ответ будет в таком виде:
{
	"count": 332,
	"results": [
		{
			"index": "aboleth",
			"name": "Aboleth",
			"url": "/api/monsters/aboleth"
		},
		{
			"index": "acolyte",
			"name": "Acolyte",
			"url": "/api/monsters/acolyte"
		}
	]
}
Затем нужно отфильтровать всех монстров, чье имя (name) начинается на "a". По каждому из этих монстров нужно будет получить расширенную информацию, например, для acolyte:
GET https://www.dnd5eapi.co/api/monsters/acolyte
{
	"index": "acolyte",
	"name": "Acolyte",
	"size": "Medium",
	"type": "humanoid",
	"subtype": "any race",
	"alignment": "any alignment",
	"armor_class": 10,
	"hit_points": 9,
	"hit_dice": "2d8",
	"speed": {
		"walk": "30 ft."
	},
	"strength": 10,
	"dexterity": 10,
	"constitution": 10,
	"intelligence": 10,
	"wisdom": 14,
	"charisma": 11,
	"proficiencies": [
		{
			"value": 4,
			"proficiency": {
				"index": "skill-medicine",
				"name": "Skill: Medicine",
				"url": "/api/proficiencies/skill-medicine"
			}
		},
		{
			"value": 2,
			"proficiency": {
				"index": "skill-religion",
				"name": "Skill: Religion",
				"url": "/api/proficiencies/skill-religion"
			}
		}
	],
	"damage_vulnerabilities": [],
	"damage_resistances": [],
	"damage_immunities": [],
	"condition_immunities": [],
	"senses": {
		"passive_perception": 12
	},
	"languages": "any one language (usually Common)",
	"challenge_rating": 0.25,
	"xp": 50,
	"special_abilities": [
		{
			"name": "Spellcasting",
			"desc": "The acolyte is a 1st-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 12, +4 to hit with spell attacks). The acolyte has following cleric spells prepared:\n\n- Cantrips (at will): light, sacred flame, thaumaturgy\n- 1st level (3 slots): bless, cure wounds, sanctuary",
			"spellcasting": {
				"level": 1,
				"ability": {
					"index": "wis",
					"name": "WIS",
					"url": "/api/ability-scores/wis"
				},
				"dc": 12,
				"modifier": 4,
				"components_required": [
					"V",
					"S",
					"M"
				],
				"school": "cleric",
				"slots": {
					"1": 3
				},
				"spells": [
					{
						"name": "Light",
						"level": 0,
						"url": "/api/spells/light"
					},
					{
						"name": "Sacred Flame",
						"level": 0,
						"url": "/api/spells/sacred-flame"
					},
					{
						"name": "Thaumaturgy",
						"level": 0,
						"url": "/api/spells/thaumaturgy"
					},
					{
						"name": "Bless",
						"level": 1,
						"url": "/api/spells/bless"
					},
					{
						"name": "Cure Wounds",
						"level": 1,
						"url": "/api/spells/cure-wounds"
					},
					{
						"name": "Sanctuary",
						"level": 1,
						"url": "/api/spells/sanctuary"
					}
				]
			}
		}
	],
	"actions": [
		{
			"name": "Club",
			"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
			"attack_bonus": 2,
			"damage": [
				{
					"damage_type": {
						"index": "bludgeoning",
						"name": "Bludgeoning",
						"url": "/api/damage-types/bludgeoning"
					},
					"damage_dice": "1d4"
				}
			]
		}
	],
	"url": "/api/monsters/acolyte"
}

Из полученного json нужно вытащить поля hit_points, type, а также названия всех спец. способностей (special_abilities->name), если они есть.
После того, как сделаны запросы по всем монстрам, по каждому нужно сформировать строку вида "имя монстра:количество хитпойнтов:тип:названия спец. способностей через запятую", отсортировать строки по Name монстра по алфавиту в обратном порядке и построчно записать в файл result.txt в той же папке, откуда запущена программа.

Пример файла result.txt:
Azer:39:elemental:Heated Body,Heated Weapons,Illumination
Axe Beak:19:beast:
Awakened Tree:59:plant:False Appearance

Длительность работы всего приложения с момента запуска не должна превышать 8 секунд.
Время должно быть измерено и выводиться в консоль с помощью time.Since в конце работы приложения, например:

now := time.Now()
...работа...
fmt.Println("time elapse:", time.Since(now))